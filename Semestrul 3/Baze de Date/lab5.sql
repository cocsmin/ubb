use GLOVO
go

--functie de random
CREATE OR ALTER FUNCTION RandomInt2(@lower INT, @upper INT)
    RETURNS INT
AS
BEGIN
    RETURN FLOOR((SELECT Value FROM RandomView) * (@upper - @lower) + @lower)
END
GO


--tabelele
-- CREATE TABLE CLIENT
-- (
--     CLIENTID INT PRIMARY KEY IDENTITY,
--     Nume VARCHAR(50) NOT NULL,
--     Telefon INT NOT NULL CHECK (Telefon >= 1000 AND Telefon <= 99999),
--     Varsta INT CHECK (Varsta >= 1 AND Varsta <= 80),
--     Gen VARCHAR(100)
-- );

-- CREATE TABLE CARD
-- (
--     CARDID INT PRIMARY KEY IDENTITY,
--     NumeCARD VARCHAR(50) NOT NULL,
--     Departament VARCHAR(50)
-- );

-- CREATE TABLE CARD_CLIENT
-- (
--     CARDID INT REFERENCES CARD(CARDID),
--     CLIENTID INT REFERENCES CLIENT(CLIENTID),
--     PRIMARY KEY (CARDID, CLIENTID)
-- );

-- CREATE TABLE ADRESA
-- (
--     ADRESAID INT PRIMARY KEY IDENTITY,
--     Nivel VARCHAR(50) NOT NULL,
--     Institutie VARCHAR(100)
-- );

-- CREATE TABLE ADRESA_CLIENT
-- (
--     ADRESAID INT REFERENCES ADRESA(ADRESAID),
--     CLIENTID INT REFERENCES CLIENT(CLIENTID),
--     PRIMARY KEY (ADRESAID, CLIENTID)
-- );

-- GO
--functie de validare
CREATE OR ALTER FUNCTION ValidateNotNull (
    @Value NVARCHAR(MAX)
)
RETURNS BIT
AS
BEGIN
    RETURN CASE WHEN @Value IS NOT NULL AND LTRIM(RTRIM(@Value)) <> '' THEN 1 ELSE 0 END;
END;
GO


--CRUD ADRESA
CREATE OR ALTER PROCEDURE InsertADRESA @seed INT
AS
BEGIN
    DECLARE @Tara VARCHAR(100) = 'Tara ' + CONVERT(VARCHAR(50), @seed)
    DECLARE @Strada VARCHAR(50) = 'Strada ' + CONVERT(VARCHAR(50), @seed)
    DECLARE @Bloc VARCHAR(50) = CONVERT(VARCHAR(50), dbo.RandomInt2(50, 180))
    DECLARE @Apartament INT = dbo.RandomInt2(1, 50)

    IF dbo.ValidateNotNull(@Tara) = 0
    BEGIN
        PRINT('Validarea a esuat pentru InsertADRESA.');
    END
    INSERT INTO ADRESA (TARA, STRADA, BLOC, APARTAMENT)
    VALUES (@Tara, @Strada, @Bloc, @Apartament);
END
GO

CREATE OR ALTER PROCEDURE UpdateADRESA
    @ADRESA_ID INT,
    @TARA VARCHAR(100),
    @STRADA VARCHAR(50),
    @BLOC VARCHAR(50),
    @Apartament INT
AS
BEGIN
 
    UPDATE ADRESA
    SET TARA = @TARA, STRADA = @STRADA, BLOC = @BLOC, APARTAMENT = @Apartament
    WHERE ID_ADR = @ADRESA_ID
END;
GO

CREATE OR ALTER PROCEDURE GetAdresaById
    @ADRESA_ID INT
AS
BEGIN
    SELECT * FROM ADRESA WHERE ID_ADR = @ADRESA_ID;
END;
GO

CREATE OR ALTER PROCEDURE DeleteADRESA @seed int
AS
BEGIN
    DELETE FROM ADRESA WHERE TARA = 'Tara ' + CONVERT(VARCHAR(50), @seed)
END;
GO


--CRUD CLIENT
CREATE OR ALTER PROCEDURE InsertCLIENT @seed INT
AS
BEGIN
    DECLARE @Nume VARCHAR(50) = 'Nume ' + CONVERT(VARCHAR(50), @seed);
    DECLARE @Prenume VARCHAR(50) = 'Prenume ' + CONVERT(VARCHAR(50), @seed);
    DECLARE @Email VARCHAR(50) = 'EMAIL ' + CONVERT(VARCHAR(50), @seed);
    IF dbo.ValidateNotNull(@Nume) = 0
    BEGIN
        PRINT('Validarea a esuat pentru InsertCLIENT.');
    END
    INSERT INTO CLIENT (NUME, PRENUME, EMAIL)
    VALUES (@Nume, @Prenume, @Email);
END;
GO

CREATE OR ALTER PROCEDURE UpdateCLIENT
    @CLIENTID INT,
    @Nume VARCHAR(50),
    @Prenume VARCHAR(50),
    @EMAIL VARCHAR(50)
AS
BEGIN
    UPDATE CLIENT
    SET NUME = @Nume, PRENUME = @Prenume, EMAIL = @EMAIL
    WHERE ID_CL = @CLIENTID;
END;
GO

CREATE OR ALTER PROCEDURE GetClientById
    @CLIENTID INT
AS
BEGIN
    SELECT * FROM CLIENT WHERE ID_CL = @CLIENTID;
END;
GO

CREATE OR ALTER PROCEDURE DeleteCLIENT @seed int
AS
BEGIN
    DELETE FROM CLIENT WHERE NUME = 'Nume ' + CONVERT(VARCHAR(50), @seed);
END;
GO


--CRUD CARD
CREATE OR ALTER PROCEDURE InsertCARD @seed INT
AS
BEGIN
    DECLARE @NrCard VARCHAR(50) = CONVERT(VARCHAR(50), dbo.RandomInt2(100000, 999999))
    DECLARE @Tip VARCHAR(50) = 'TipCard ' + CONVERT(VARCHAR(50), dbo.RandomInt2(1, 10));
    DECLARE @Data DATE = CAST(GETDATE() AS DATE)
    
    IF dbo.ValidateNotNull(@NrCard) = 0
    BEGIN
        PRINT('Validarea a esuat pentru InsertCARD.');
    END

    INSERT INTO CARD (NUMAR_CARD, TIP_CARD, DATA_EXP)
    VALUES (@NrCard, @Tip, @Data);
END;
GO

CREATE OR ALTER PROCEDURE UpdateCARD
    @CARDID INT,
    @TIP VARCHAR(50),
    @NrCard VARCHAR(100),
    @DATA DATE
AS
BEGIN
    UPDATE CARD
    SET NUMAR_CARD = @NrCard, TIP_CARD = @TIP, DATA_EXP = @DATA
    WHERE ID_CARD = @CARDID;
END;
GO

CREATE OR ALTER PROCEDURE GetCardById
    @CARDID INT
AS
BEGIN
    SELECT * FROM CARD WHERE ID_CARD = @CARDID;
END;
GO

CREATE OR ALTER PROCEDURE DeleteCARD
    @CARDID INT
AS
BEGIN
    DELETE FROM CARD WHERE ID_CARD = @CARDID;
END;
GO


--CRUD PLATA
CREATE OR ALTER PROCEDURE InsertPLATA
    @id_CLIENT INT,
    @id_CARD INT
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM CLIENT WHERE ID_CL = @id_CLIENT)
    BEGIN
        PRINT 'id_CLIENT nu există în tabela CLIENT.';
        RETURN;
    END;

    IF NOT EXISTS (SELECT 1 FROM CARD WHERE ID_CARD = @id_CARD)
    BEGIN
        PRINT 'id_CARD nu există în tabela CARD.';
        RETURN;
    END;

    IF EXISTS (SELECT 1 FROM PLATA WHERE ID_CL = @id_CLIENT AND ID_CARD = @id_CARD)
    BEGIN
        PRINT 'Aceasta combinate de ID-uri există deja în tabela PLATA.';
        RETURN;
    END;

    INSERT INTO PLATA (ID_CL, ID_CARD)
    VALUES (@id_CLIENT, @id_CARD);

END;
GO


CREATE OR ALTER PROCEDURE UpdatePLATA
    @CLIENTID INT,
    @CARDID INT,
    @NewCARDID INT
AS
BEGIN
    IF NOT EXISTS (SELECT * FROM CARD WHERE ID_CARD = @NewCARDID)
    THROW 50000, 'CARDID nou nu exista.', 1;

    UPDATE PLATA
    SET ID_CARD = @NewCARDID
    WHERE ID_CARD = @CARDID AND ID_CL = @CLIENTID;
END;
GO

CREATE OR ALTER PROCEDURE GetCardsForClient
    @CLIENTID INT
AS
BEGIN
    SELECT C.ID_CARD, C.NUMAR_CARD, C.TIP_CARD, C.DATA_EXP
    FROM PLATA PL
    INNER JOIN CARD C ON PL.ID_CARD = C.ID_CARD
    WHERE PL.ID_CL = @CLIENTID;
END;
GO

CREATE OR ALTER PROCEDURE DeletePLATA
    @CLIENTID INT,
    @CARDID INT
AS
BEGIN
    DELETE FROM PLATA
    WHERE ID_CL = @CLIENTID AND ID_CARD = @CARDID;
END;
GO



--CRUD MENIU_ALC
CREATE OR ALTER PROCEDURE InsertMENIU_ALC @seed INT
AS
BEGIN
    DECLARE @Denumire VARCHAR(50) = 'Denumire ' + CONVERT(VARCHAR(50), @seed);
    DECLARE @Procent INT = dbo.RandomInt2(3, 40)
    DECLARE @Cantitate INT = dbo.RandomInt2(1, 10)
    DECLARE @Pret INT = CONVERT(FLOAT, dbo.RandomInt2(10, 100))
    IF dbo.ValidateNotNull(@Denumire) = 0
    BEGIN
        PRINT('Validarea a esuat pentru InsertMENIU_ALC.');
    END
    INSERT INTO MENIU_ALC (DENUMIRE, PROCENTAJ_ALC, CANTITATE, PRET)
    VALUES (@Denumire, @Procent, @Cantitate, @Pret);
END;
GO

CREATE OR ALTER PROCEDURE UpdateMENIU_ALC
    @ID_ALC INT,
    @Denumire VARCHAR(50),
    @Procent INT,
    @Cantitate INT,
    @Pret FLOAT
AS
BEGIN
    UPDATE MENIU_ALC
    SET DENUMIRE = @Denumire, PROCENTAJ_ALC = @Procent, CANTITATE = @Cantitate, PRET = @Pret
    WHERE ID_MEN_ALC = @ID_ALC
END;
GO

CREATE OR ALTER PROCEDURE GetAlc
    @ID_ALC INT
AS
BEGIN
    SELECT * FROM MENIU_ALC WHERE ID_MEN_ALC = @ID_ALC;
END;
GO

CREATE OR ALTER PROCEDURE DeleteAlc @seed int,
    @ID_ALC INT
AS
BEGIN
    DELETE FROM MENIU_ALC WHERE DENUMIRE = 'Denumire ' + CONVERT(VARCHAR(50), @seed);
END;
GO

-- View-uri
CREATE OR ALTER VIEW ViewPLATA
AS
SELECT C.ID_CL, C.NUME AS Nume, C.PRENUME,C.EMAIL,CD.ID_CARD,CD.NUMAR_CARD,CD.TIP_CARD
FROM CLIENT C
INNER JOIN PLATA PL ON C.ID_CL = PL.ID_CL
INNER JOIN CARD CD ON PL.ID_CARD = CD.ID_CARD;
GO

CREATE OR ALTER VIEW ViewCLIENTADRESA
AS
SELECT C.ID_CL,C.NUME AS Nume,C.PRENUME,C.EMAIL,A.TARA,A.STRADA,A.BLOC,A.APARTAMENT
FROM CLIENT C
INNER JOIN ADRESA A ON C.ID_ADR = A.ID_ADR;
GO

--index
CREATE NONCLUSTERED INDEX IDX_CLIENT_Nume ON CLIENT (NUME);

CREATE NONCLUSTERED INDEX IDX_CARD_DATA ON CARD (DATA_EXP);

CREATE NONCLUSTERED INDEX IDX_PLATA_CARDID ON PLATA (ID_CARD);

CREATE NONCLUSTERED INDEX IDX_ADRESA_TARA ON ADRESA (TARA);

CREATE NONCLUSTERED INDEX IDX_MENIU_ALC_PRET ON MENIU_ALC (PRET);

SELECT 
    t.name AS TableName,
    i.name AS IndexName,
    i.type_desc AS IndexType,
    i.is_primary_key AS IsPrimaryKey,
    i.is_unique AS IsUnique,
    i.is_unique_constraint AS IsUniqueConstraint
FROM sys.tables t
JOIN sys.indexes i ON t.object_id = i.object_id
WHERE i.type_desc = 'NONCLUSTERED'
ORDER BY t.name, i.name;





EXEC InsertCLIENT @seed = 1;
EXEC InsertCLIENT @seed = 2;
EXEC InsertCLIENT @seed = 3;
EXEC InsertCLIENT @seed = 4;
EXEC UpdateCLIENT @CLIENTID = 6, @Nume = 'Actualizat NUME', @Prenume = 'Actualizat PRENUME', @EMAIL = 'Actualizat EMAIL'
EXEC GetClientById 2;
EXEC DeleteCLIENT @seed = 1;
--DELETE FROM CLIENT;

EXEC InsertCARD @seed = 1;
EXEC InsertCARD @seed = 2;
EXEC InsertCARD @seed = 3;
EXEC InsertCARD @seed = 4;
EXEC UpdateCARD @CARDID = 1, @TIP = 'Actualizat  TIP', @NrCard = 'Actualizar nr de card', @DATA = '2004-07-17'
EXEC DeleteCARD @seed = 1;
--DELETE FROM CARD;

EXEC InsertADRESA @seed = 1;
EXEC InsertADRESA @seed = 2;
EXEC InsertADRESA @seed = 3;
EXEC InsertADRESA @seed = 4;
EXEC UpdateADRESA @ADRESAID = 1, @TARA = 'TARA Actualizata', @STRADA = 'STRADA ACTUALIZATA', @BLOC = 'BLOC FRESH', @Apartament = 69;
EXEC DeleteADRESA @seed = 1;
--DELETE FROM ADRESA;

EXEC InsertPLATA;
EXEC UpdatePLATA @id_CLIENT = 1, @id_CARD = 1, @NewCARDID = 2;
--DELETE FROM CARD_CLIENT;

EXEC InsertMENIU_ALC @seed = 1;
EXEC UpdateMENIU_ALC @ID_ALC = 1, @Denumire = 'ALCOOL FRESH', @Procent = 17, @Cantitate = 3, @Pret = 90;
--DELETE FROM ADRESA_CLIENT;

SELECT * FROM CLIENT
SELECT * FROM CARD
SELECT * FROM ADRESA
SELECT * FROM PLATA
SELECT * FROM MENIU_ALC

SELECT * FROM ViewPLATA
SELECT * FROM ViewCLIENTADRESA

DROP INDEX IDX_CLIENTID ON CLIENT;
DROP INDEX IDX_CLIENT_Nume ON CLIENT;
DROP INDEX IDX_CARDID ON CARD;
DROP INDEX IDX_CARD_NumeCARD ON CARD;
DROP INDEX IDX_CARDCLIENT_CLIENTID ON CARD_CLIENT;
DROP INDEX IDX_CARDCLIENT_CARDID ON CARD_CLIENT;
DROP INDEX IDX_ADRESAID ON ADRESA;
DROP INDEX IDX_ADRESA_Nivel ON ADRESA;
DROP INDEX IDX_ADRESACLIENT_CLIENTID ON ADRESA_CLIENT;
DROP INDEX IDX_ADRESACLIENT_ADRESAID ON ADRESA_CLIENT;
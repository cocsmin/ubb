     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Sa se citeasca de la tastatura doua numere a si b (in baza 10) şi să se determine relaţia de ordine dintre ele (a < b, a = b sau a > b). Afisati rezultatul în următorul format: "<a> < <b>, <a> = <b> sau <a
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 256400                      format db "%d", 0
    19 0000000B 2564203E20256400            mare db "%d > %d", 0
    20 00000013 2564203C20256400            mic db "%d < %d", 0
    21 0000001B 2564203D20256400            egal db "%d = %d", 0
    22 00000023 613D00                      mesaj_a db "a=", 0
    23 00000026 623D00                      mesaj_b db "b=", 0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 68[23000000]                    push mesaj_a
    30 00000005 FF15[00000000]                  call [printf]
    31 0000000B 83C404                          add esp, 4
    32                                          
    33 0000000E 68[00000000]                    push a
    34 00000013 68[08000000]                    push format
    35 00000018 FF15[00000000]                  call [scanf]
    36 0000001E 83C408                          add esp, 4*2
    37                                          
    38 00000021 68[26000000]                    push mesaj_b
    39 00000026 FF15[00000000]                  call [printf]
    40 0000002C 83C404                          add esp, 4
    41                                          
    42 0000002F 68[04000000]                    push b
    43 00000034 68[08000000]                    push format
    44 00000039 FF15[00000000]                  call [scanf]
    45 0000003F 83C408                          add esp, 4*2
    46                                          
    47 00000042 A1[00000000]                    mov EAX, [a]
    48 00000047 3B05[04000000]                  cmp EAX, [b]
    49 0000004D 7F1E                            jg mai_mare
    50 0000004F 7C38                            jl mai_mic
    51 00000051 FF35[04000000]                  push dword[b]
    52 00000057 FF35[00000000]                  push dword[a]
    53 0000005D 68[1B000000]                    push egal
    54 00000062 FF15[00000000]                  call [printf]
    55 00000068 83C40C                          add esp, 4*3
    56 0000006B EB38                            jmp gata
    57                                          
    58                                          mai_mare:
    59 0000006D FF35[04000000]                      push dword[b]
    60 00000073 FF35[00000000]                      push dword[a]
    61 00000079 68[0B000000]                        push mare
    62 0000007E FF15[00000000]                      call [printf]
    63 00000084 83C40C                              add esp, 4*3
    64 00000087 EB1C                                jmp gata
    65                                              
    66                                          mai_mic:
    67 00000089 FF35[04000000]                      push dword[b]
    68 0000008F FF35[00000000]                      push dword[a]
    69 00000095 68[13000000]                        push mic
    70 0000009A FF15[00000000]                      call [printf]
    71 000000A0 83C40C                              add esp, 4*3
    72 000000A3 EB00                                jmp gata
    73                                              
    74                                          gata:
    75                                      
    76                                          ; exit(0)
    77 000000A5 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 000000A7 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

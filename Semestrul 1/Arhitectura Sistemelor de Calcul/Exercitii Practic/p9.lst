     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Sa se citeasca de la tastatura doua numere a si b (in baza 10) si sa se calculeze: (a+b) / (a-b). Catul impartirii se va salva in memorie in variabila "rezultat" (definita in segmentul de date). Valorile se con
    16 00000000 00000000                    rezultat dd 0
    17 00000004 0000                        a dw 0
    18 00000006 0000                        b dw 0
    19 00000008 256400                      format db "%d", 0
    20 0000000B 613D00                      mesaj_a db "a=", 0
    21 0000000E 623D00                      mesaj_b db "b=", 0
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 68[0B000000]                    push mesaj_a
    27 00000005 FF15[00000000]                  call [printf]
    28 0000000B 83C404                          add esp, 4
    29                                          
    30 0000000E 68[04000000]                    push a
    31 00000013 68[08000000]                    push format
    32 00000018 FF15[00000000]                  call [scanf]
    33 0000001E 83C408                          add esp, 4*2
    34                                          
    35 00000021 68[0E000000]                    push mesaj_b
    36 00000026 FF15[00000000]                  call [printf]
    37 0000002C 83C404                          add esp, 4
    38                                          
    39 0000002F 68[06000000]                    push b
    40 00000034 68[08000000]                    push format
    41 00000039 FF15[00000000]                  call [scanf]
    42 0000003F 83C408                          add esp, 4*2
    43                                          
    44 00000042 66A1[04000000]                  mov AX, [a]
    45 00000048 660305[06000000]                add AX, [b]
    46 0000004F 6699                            cwd
    47                                          
    48 00000051 668B1D[04000000]                mov BX, [a]
    49 00000058 662B1D[06000000]                sub BX, [b]
    50                                          
    51 0000005F 66F7FB                          idiv BX
    52 00000062 66A3[00000000]                  mov [rezultat], AX
    53                                          
    54 00000068 FF35[00000000]                  push dword[rezultat]
    55 0000006E 68[08000000]                    push format
    56 00000073 FF15[00000000]                  call [printf]
    57 00000079 83C408                          add esp, 4*2
    58                                          
    59                                          
    60                                          
    61                                      
    62                                          ; exit(0)
    63 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program

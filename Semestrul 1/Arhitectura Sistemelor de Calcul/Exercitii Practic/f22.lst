     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fprintf, fopen, fclose, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fprintf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17                                      
    18                                      ;Se da numele unui fisier si un numar pe cuvant scris in memorie. Se considera numarul in reprezentarea fara semn. Sa se scrie cifrele zecimale ale acestui numar ca text in fisier, fiecare cifra pe o linie separ
    19                                  
    20 00000000 6461746532322E7478-         nume_fisier db "date22.txt", 0
    20 00000009 7400               
    21 0000000B 772B00                      mod_acces db "w+", 0
    22 0000000E 313131313131313131-         numar_binar db "1111111111111111", 0
    22 00000017 3131313131313100   
    23 0000001F 00                          numar_zecimal db 0
    24 00000020 FFFFFFFF                    descriptor dd -1
    25                                      baza equ 2
    26 00000024 256400                      format db "%d", 0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 BE[0E000000]                    mov ESI, numar_binar
    32 00000005 B90F000000                      mov ECX, 15
    33 0000000A BA00000000                      mov EDX, 0
    34                                          repeta:
    35 0000000F B800000000                          mov EAX, 0
    36 00000014 AC                                  lodsb
    37 00000015 3C00                                cmp AL, 0
    38 00000017 740D                                je next
    39 00000019 89CB                                mov EBX, ECX
    40 0000001B B402                                mov AH, baza
    41                                              putere:
    42 0000001D F6E4                                    mul AH
    43 0000001F E2FC                                    loop putere
    44 00000021 6601C2                              add DX, AX
    45 00000024 89D9                                mov ECX, EBX
    46                                              next:
    47 00000026 E2E7                                loop repeta
    48                                          
    49 00000028 668915[1F000000]                mov [numar_zecimal], DX
    50 0000002F FF35[1F000000]                  push dword[numar_zecimal]
    51 00000035 68[24000000]                    push format
    52 0000003A FF15[00000000]                  call [printf]
    53 00000040 83C408                          add esp, 4*2
    54                                          
    55                                          ; push mod_acces
    56                                          ; push nume_fisier
    57                                          ; call [fopen]
    58                                          ; add esp, 4*2
    59                                          
    60                                          
    61                                          ; exit(0)
    62 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

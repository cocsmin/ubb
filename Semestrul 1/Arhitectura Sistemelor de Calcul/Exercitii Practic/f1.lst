     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fscanf, fopen, fclose, printf, fread              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fscanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import fread msvcrt.dll
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      ;Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze numarul de vocale si sa se afiseze aceasta valoare. Numele fisierului text este definit in segmentul de date.
    19 00000000 FFFFFFFF                    id dd -1
    20 00000004 256400                      format db "%d", 0
    21 00000007 00000000                    nr_vocale dd 0
    22 0000000B 64617465312E747874-         nume_fisier db "date1.txt", 0
    22 00000014 00                 
    23 00000015 7200                        mod_acces db "r", 0
    24 00000017 6165696F7500                vocale db 'a','e','i','o','u', 0
    25                                      len equ 100
    26 0000001D 00<rept>                    text times len db 0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      f1:
    30 00000000 BF[1D000000]                    mov EDI, text
    31 00000005 BE00000000                      mov ESI, 0
    32 0000000A 89C1                            mov ECX, EAX ;numarul de caractere citite din fisier
    33 0000000C BA00000000                      mov EDX, 0
    34                                          repeta:
    35 00000011 AC                                  lodsb
    36 00000012 51                                  push ECX
    37 00000013 B905000000                          mov ECX, 5
    38 00000018 BE00000000                          mov ESI, 0
    39                                              repeta2:
    40 0000001D 3A86[17000000]                          cmp AL, [vocale+ESI]
    41 00000023 7501                                    jne next
    42 00000025 42                                      inc EDX
    43                                                  next:
    44 00000026 46                                      inc ESI
    45 00000027 E2F4                                    loop repeta2
    46 00000029 59                                  pop ECX
    47 0000002A E2E5                                loop repeta
    48                                              
    49 0000002C C3                              ret
    50                                      start:
    51                                          ; ...
    52 0000002D 68[15000000]                    push dword mod_acces
    53 00000032 68[0B000000]                    push dword nume_fisier
    54 00000037 FF15[00000000]                  call [fopen]
    55 0000003D 83C408                          add esp, 4*2
    56                                          
    57 00000040 A3[00000000]                    mov [id], EAX
    58 00000045 83F800                          cmp EAX, 0
    59 00000048 7446                            je final
    60                                          
    61 0000004A FF35[00000000]                  push dword[id]
    62 00000050 6A64                            push dword len
    63 00000052 6A01                            push dword 1
    64 00000054 68[1D000000]                    push dword text
    65 00000059 FF15[00000000]                  call [fread]
    66 0000005F 83C410                          add esp, 4*4
    67                                          
    68 00000062 E899FFFFFF                      call f1
    69                                          
    70 00000067 8915[07000000]                  mov [nr_vocale], EDX
    71 0000006D FF35[07000000]                  push dword[nr_vocale]
    72 00000073 68[04000000]                    push format
    73 00000078 FF15[00000000]                  call [printf]
    74 0000007E 83C408                          add esp, 4*2
    75                                          
    76 00000081 FF35[00000000]                  push dword[id]
    77 00000087 FF15[00000000]                  call [fclose]
    78 0000008D 83C404                          add esp, 4
    79                                          
    80                                          
    81                                              
    82                                          
    83                                          
    84                                          
    85                                      
    86                                          final:
    87                                          ; exit(0)
    88 00000090 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 00000092 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

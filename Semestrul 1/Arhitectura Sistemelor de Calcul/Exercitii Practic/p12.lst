     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Se da un numar natural negativ a (a: dword). Sa se afiseze valoarea lui in baza 10 si in baza 16, in urmatorul format: "a = <base_10> (baza 10), a = <base_16> (baza 16)"
    16 00000000 FBFFFFFF                    a dd -5
    17 00000004 61203D202564202862-         format db "a = %d (baza 10), a = %x (baza 16)", 0
    17 0000000D 617A61203130292C20-
    17 00000016 61203D202578202862-
    17 0000001F 617A612031362900   
    18                                      ;msj db "Introduceti numarul: ", 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 FF35[00000000]                  push dword[a]
    25 00000006 FF35[00000000]                  push dword[a]
    26 0000000C 68[04000000]                    push format
    27 00000011 FF15[00000000]                  call [printf]
    28 00000017 83C40C                          add esp, 4*3
    29                                         
    30                                          
    31                                          
    32                                      
    33                                          ; exit(0)
    34 0000001A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    35 0000001C FF15[00000000]                  call    [exit]       ; call exit to terminate the program

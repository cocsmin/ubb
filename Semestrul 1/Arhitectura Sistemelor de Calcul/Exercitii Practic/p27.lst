     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Se dă un sir de caractere (definit in segmentul de date). Să se citească de la tastatură un caracter, să se determine numărul de apariţii al acelui caracter în şirul dat şi să se afişeze acel caract
    16 00000000 61626361656100              sir db 'a', 'b', 'c', 'a', 'e', 'a', 0
    17                                      lungime equ $-sir
    18 00000007 256300                      format db "%c", 0
    19 0000000A 00                          caracter db 0
    20 0000000B 00000000                    contor dd 0
    21 0000000F 496E74726F64756365-         mesaj db "Introduceti caracterul: ", 0
    21 00000018 746920636172616374-
    21 00000021 6572756C3A2000     
    22 00000028 436172616374657275-         afisare db "Caracterul %c apare de %d ori "
    22 00000031 6C2025632061706172-
    22 0000003A 65206465202564206F-
    22 00000043 726920             
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[0F000000]                    push mesaj
    28 00000005 FF15[00000000]                  call [printf]
    29 0000000B 83C404                          add esp, 4
    30                                          
    31 0000000E 68[0A000000]                    push caracter
    32 00000013 68[07000000]                    push format
    33 00000018 FF15[00000000]                  call [scanf]
    34 0000001E 83C408                          add esp, 4*2
    35                                          
    36 00000021 BE00000000                      mov ESI, 0
    37 00000026 BB00000000                      mov EBX, 0
    38 0000002B B907000000                      mov ECX, lungime
    39                                          repeta:
    40 00000030 8A86[00000000]                      mov AL, [sir+ESI]
    41 00000036 3A05[0A000000]                      cmp AL, [caracter]
    42 0000003C 7501                                jne next
    43 0000003E 43                                  inc EBX
    44                                              next:
    45 0000003F 46                                  inc ESI
    46 00000040 E2EE                                loop repeta
    47                                          
    48 00000042 891D[0B000000]                  mov [contor], EBX
    49 00000048 FF35[0B000000]                  push dword[contor]
    50 0000004E FF35[0A000000]                  push dword[caracter]
    51 00000054 68[28000000]                    push afisare
    52 00000059 FF15[00000000]                  call [printf]
    53 0000005F 83C40C                          add esp, 4*3
    54                                          
    55                                      
    56                                          ; exit(0)
    57 00000062 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000064 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

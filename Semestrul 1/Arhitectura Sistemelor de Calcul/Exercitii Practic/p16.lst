     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Sa se citeasca de la tastatura doua numere a si b (in baza 10). Sa se calculeze si sa se afiseze media lor aritmetica in baza 16.
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 613D00                      mesaj_a db "a=", 0
    19 0000000B 623D00                      mesaj_b db "b=", 0
    20 0000000E 256400                      deca db "%d", 0
    21 00000011 257800                      hexa db "%x", 0
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[08000000]                    push mesaj_a
    28 00000005 FF15[00000000]                  call [printf]
    29 0000000B 83C404                          add esp, 4
    30                                          
    31 0000000E 68[00000000]                    push a
    32 00000013 68[0E000000]                    push deca
    33 00000018 FF15[00000000]                  call [scanf]
    34 0000001E 83C408                          add esp, 4*2
    35                                          
    36 00000021 68[0B000000]                    push mesaj_b
    37 00000026 FF15[00000000]                  call [printf]
    38 0000002C 83C404                          add esp, 4
    39                                          
    40 0000002F 68[04000000]                    push b
    41 00000034 68[0E000000]                    push deca
    42 00000039 FF15[00000000]                  call [scanf]
    43 0000003F 83C408                          add esp, 4*2
    44                                          
    45 00000042 A1[00000000]                    mov EAX, [a]
    46 00000047 0305[04000000]                  add EAX, [b]
    47 0000004D BA00000000                      mov EDX, 0
    48 00000052 BB02000000                      mov EBX, 2
    49 00000057 F7F3                            div EBX
    50                                      
    51 00000059 50                              push EAX
    52 0000005A 68[11000000]                    push hexa
    53 0000005F FF15[00000000]                  call [printf]
    54 00000065 83C408                          add esp, 4*2
    55                                      
    56                                          ; exit(0)
    57 00000068 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 0000006A FF15[00000000]                  call    [exit]       ; call exit to terminate the program

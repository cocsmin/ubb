     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Se citesc de la tastatura numere (in baza 10) pana cand se introduce cifra 0. Determinaţi şi afişaţi cel mai mare număr dintre cele citite.
    16 00000000 00000000                    x dd 0
    17 00000004 256400                      format db "%d", 0
    18 00000007 496E74726F64756365-         mesaj db "Introduceti numarul: ", 10, 13, 0
    18 00000010 7469206E756D617275-
    18 00000019 6C3A200A0D00       
    19 0000001F 00000000                    maxim dd 0
    20 00000023 4D6178696D756C2065-         afisare db "Maximul este %d", 0
    20 0000002C 73746520256400     
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 31C0                            xor EAX, EAX
    26                                          citeste:
    27 00000002 68[07000000]                        push mesaj
    28 00000007 FF15[00000000]                      call [printf]
    29 0000000D 83C404                              add esp, 4
    30 00000010 68[00000000]                        push x
    31 00000015 68[04000000]                        push format
    32 0000001A FF15[00000000]                      call [scanf]
    33 00000020 83C408                              add esp, 4*2
    34                                              
    35 00000023 A1[00000000]                        mov EAX, [x]
    36 00000028 3905[1F000000]                      cmp [maxim], EAX
    37 0000002E 7F05                                jg next
    38 00000030 A3[1F000000]                        mov [maxim], EAX
    39                                              next:
    40 00000035 833D[00000000]00                    cmp dword[x], 0
    41 0000003C 75C4                                jne citeste
    42                                          
    43                                          ;mov [maxim], EAX
    44 0000003E FF35[1F000000]                  push dword[maxim]
    45 00000044 68[23000000]                    push afisare
    46 00000049 FF15[00000000]                  call [printf]
    47 0000004F 83C408                          add esp, 4*2
    48                                          
    49                                          ; exit(0)
    50 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Se dau doua numere naturale a si b (a, b: word, definite in segmentul de date). Sa se calculeze produsul lor si sa se afiseze in urmatorul format: "<a> * <b> = <result>"
    16                                      ;Exemplu: "2 * 4 = 8"
    17                                      ;Valorile vor fi afisate in format decimal (baza 10) cu semn.
    18 00000000 0200                        a dw 2
    19 00000002 0400                        b dw 4
    20 00000004 00000000                    result dd 0
    21 00000008 2564202A202564203D-         format db "%d * %d = %d"
    21 00000011 202564             
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 66A1[00000000]                  mov AX, [a]
    27 00000006 66F72D[02000000]                imul word[b]
    28 0000000D 66A3[04000000]                  mov word[result], AX
    29 00000013 668915[06000000]                mov word[result+2], DX
    30                                          
    31 0000001A 66A1[02000000]                  mov AX, [b]
    32 00000020 98                              cwde
    33 00000021 89C3                            mov EBX, EAX
    34 00000023 66A1[00000000]                  mov AX, [a]
    35 00000029 98                              cwde
    36                                          
    37 0000002A FF35[04000000]                  push dword[result]
    38 00000030 53                              push EBX
    39 00000031 50                              push EAX
    40 00000032 68[08000000]                    push format
    41 00000037 FF15[00000000]                  call [printf]
    42 0000003D 83C410                          add esp, 4*4
    43                                      
    44                                          ; exit(0)
    45 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

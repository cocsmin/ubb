     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;Se da un numar natural a (a: dword, definit in segmentul de date). Sa se citeasca un numar natural b si sa se calculeze: a + a/b. Sa se afiseze rezultatul operatiei. Valorile vor fi afisate in format decimal (b
    16 00000000 0A000000                    a dd 10
    17 00000004 00000000                    b dd 0
    18 00000008 00000000                    rezultat dd 0
    19 0000000C 256400                      format db "%d", 0
    20 0000000F 623D00                      msj db "b=", 0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 68[0F000000]                    push msj
    26 00000005 FF15[00000000]                  call [printf]
    27 0000000B 83C404                          add esp, 4
    28                                          
    29 0000000E 68[04000000]                    push b
    30 00000013 68[0C000000]                    push format
    31 00000018 FF15[00000000]                  call [scanf]
    32 0000001E 83C408                          add esp, 4*2
    33                                          
    34 00000021 66A1[00000000]                  mov AX, [a]
    35 00000027 668B15[02000000]                mov DX, [a+2]
    36 0000002E 66F73D[04000000]                idiv word[b]
    37                                          
    38 00000035 98                              cwde
    39 00000036 660305[00000000]                add AX, [a]
    40 0000003D 66A3[08000000]                  mov [rezultat], AX
    41                                          
    42 00000043 FF35[08000000]                  push dword[rezultat]
    43 00000049 68[0C000000]                    push format
    44 0000004E FF15[00000000]                  call [printf]
    45 00000054 83C408                          add esp, 4*2
    46                                          
    47                                      
    48                                          ; exit(0)
    49 00000057 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000059 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

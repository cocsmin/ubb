     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start     
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fread, printf, fopen, fclose           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fread msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      ;Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze numarul de litere 'y' si 'z' si sa se afiseze aceaste valori. Numele fisierului text este definit in segmentul de date.
    19 00000000 6461746531362E7478-         nume_fisier db "date16.txt", 0
    19 00000009 7400               
    20 0000000B 7200                        mod_acces db "r", 0
    21 0000000D 00000000                    nr_y dd 0
    22 00000011 00000000                    nr_z dd 0
    23 00000015 FFFFFFFF                    descriptor dd -1
    24                                      len equ 100
    25 00000019 00<rept>                    text times len db 0
    26 0000007D 4E756D6172756C2064-         afisare db "Numarul de 'y' e %d, iar cel de 'z' e %d", 0
    26 00000086 652027792720652025-
    26 0000008F 642C20696172206365-
    26 00000098 6C20646520277A2720-
    26 000000A1 6520256400         
    27                                      
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33 00000000 68[0B000000]                    push mod_acces
    34 00000005 68[00000000]                    push nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36                                          
    37 00000010 A3[15000000]                    mov [descriptor], EAX
    38 00000015 83F800                          cmp EAX, 0
    39 00000018 7469                            je final
    40                                          
    41 0000001A FF35[15000000]                  push dword[descriptor]
    42 00000020 6A64                            push len
    43 00000022 6A01                            push 1
    44 00000024 68[19000000]                    push text
    45 00000029 FF15[00000000]                  call [fread]
    46 0000002F 83C410                          add esp, 4*4
    47                                          
    48 00000032 BE[19000000]                    mov ESI, text
    49 00000037 B300                            mov BL, 0 ; nr_y
    50 00000039 B700                            mov BH, 0 ; nr_z
    51                                          repeta:
    52 0000003B AC                                  lodsb
    53 0000003C 3C00                                cmp AL, 0
    54 0000003E 740E                                je afara
    55 00000040 3C79                                cmp AL, 'y'
    56 00000042 7502                                jne nein
    57 00000044 FEC3                                inc BL
    58                                              nein:
    59 00000046 3C7A                                cmp AL, 'z'
    60 00000048 7502                                jne next
    61 0000004A FEC7                                inc BH
    62                                              next:
    63 0000004C EBED                                jmp repeta
    64                                              
    65                                          afara:
    66                                              
    67 0000004E 883D[11000000]                  mov [nr_z], BH
    68 00000054 881D[0D000000]                  mov [nr_y], BL
    69 0000005A FF35[11000000]                  push dword[nr_z]
    70 00000060 FF35[0D000000]                  push dword[nr_y]
    71 00000066 68[7D000000]                    push afisare
    72 0000006B FF15[00000000]                  call [printf]
    73 00000071 83C40C                          add esp, 4*3
    74                                          
    75 00000074 FF35[15000000]                  push dword[descriptor]
    76 0000007A FF15[00000000]                  call [fclose]
    77 00000080 83C404                          add esp, 4
    78                                      
    79                                      
    80                                      
    81                                      
    82                                      final:
    83                                          ; exit(0)
    84 00000083 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    85 00000085 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 6666                        a dw 0110011001100110b ; cuvantul a
    15 00000002 3333                        b dw 0011001100110011b ; cuvantul b
    16 00000004 <res 00000004>              c resw 2 ; cuvantul c care se cere
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; ...
    21                                          ;bitii 0-3 ai lui C coincid cu bitii 5-8 ai lui B
    22                                          
    23 00000000 B800000000                      mov EAX, 0
    24 00000005 66A1[02000000]                  mov AX, [b]
    25 0000000B 6625E001                        and AX, 0000000111100000b ; AX = 0000000100100000
    26 0000000F 66C1E805                        shr AX, 5 ; AX = 0000000000001111
    27 00000013 0905[04000000]                  or [c], EAX ;c = 0000000000000000 0000000000001001
    28                                          
    29                                          ;bitii 4-10 ai lui C sunt invers fata de bitii 0-6 ai lui B
    30                                          
    31 00000019 B800000000                      mov EAX, 0
    32 0000001E 66A1[02000000]                  mov AX, [b]
    33 00000024 6683E07F                        and AX, 0000000001111111b ; AX = 0000000000110011
    34 00000028 66C1E004                        shl AX, 4 ; AX = 0000001100110000
    35 0000002C 66F7D0                          not AX ; AX = 11111 1001100 1111
    36 0000002F 6625F007                        and AX, 0000011111110000b ; AX = 00000 1001100 0000
    37 00000033 0905[04000000]                  or [c], EAX ; c = 0000000000000 00000000 10011001001
    38                                          
    39                                          ;bitii 11-18 ai lui C sunt 1
    40                                          
    41 00000039 B800000000                      mov EAX, 0
    42 0000003E 83C8FF                          or EAX, 11111111111111111111111111111111b
    43 00000041 2500F80700                      and EAX, 00000000000001111111100000000000b ; EAX = 0000000000000 11111111 00000000000
    44 00000046 0905[04000000]                  or [c], EAX ; c = 0000000000000 11111111 10011001001
    45                                          
    46                                          ;bitii 19-31 ai lui C coincid cu bitii 3-15 ai lui B
    47                                          
    48 0000004C B800000000                      mov EAX, 0
    49 00000051 66A1[02000000]                  mov AX, [b]
    50 00000057 6683E0F8                        and AX, 1111111111111000b ; AX = 0011001100110 000
    51 0000005B C1E010                          shl EAX, 16
    52 0000005E 660905[04000000]                or [c], AX ; c = 00110011001101111111110011001001
    53 00000065 8B1D[04000000]                  mov EBX, [c]
    54                                          
    55                                          ; exit(0)
    56 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program

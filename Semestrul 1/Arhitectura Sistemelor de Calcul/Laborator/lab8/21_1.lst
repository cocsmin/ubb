     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     9                                  extern printf
    10                                  extern scanf
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ;Sa se citeasca de la tastatura doua numere a si b de tip word. Sa se afiseze in baza 16 numarul c de tip dword pentru care partea low este suma celor doua numere, iar partea high este diferenta celor doua numer
    16                                      ;a = 574, b = 136
    17                                      ;c = 01B602C6h
    18                                      ; ...
    19 00000000 0000                        a dw 0
    20 00000002 0000                        b dw 0
    21 00000004 00000000                    c dd 0
    22 00000008 613D2000                    citire_a db "a= ", 0
    23 0000000C 623D2000                    citire_b db "b= ", 0
    24 00000010 633D2000                    afisare db "c= ", 0
    25 00000014 256400                      format db "%d", 0
    26 00000017 257800                      format2 db "%x", 0
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 68[08000000]                    push dword citire_a
    32 00000005 FF15[00000000]                  call [printf]
    33 0000000B 83C404                          add esp, 4*1
    34 0000000E 68[00000000]                    push dword a
    35 00000013 68[14000000]                    push dword format
    36 00000018 FF15[00000000]                  call [scanf]
    37 0000001E 83C408                          add esp, 4*2
    38                                          
    39 00000021 68[0C000000]                    push dword citire_b
    40 00000026 FF15[00000000]                  call [printf]
    41 0000002C 83C404                          add esp, 4*1
    42 0000002F 68[02000000]                    push dword b
    43 00000034 68[14000000]                    push dword format
    44 00000039 FF15[00000000]                  call [scanf]
    45 0000003F 83C408                          add esp, 4*2
    46                                          
    47 00000042 66A1[00000000]                  mov AX, [a]
    48 00000048 660305[02000000]                add AX, [b] ; AX = a + b
    49                                          
    50 0000004F 668B15[00000000]                mov DX, [a]
    51 00000056 662B15[02000000]                sub DX, [b] ; DX = a - b
    52                                          
    53 0000005D 66A3[04000000]                  mov [c], AX
    54 00000063 668915[06000000]                mov [c+2], DX
    55                                          
    56 0000006A FF35[06000000]                  push dword [c+2]
    57 00000070 FF35[04000000]                  push dword [c]
    58 00000076 68[17000000]                    push dword format2
    59 0000007B FF15[00000000]                  call [printf]
    60 00000081 83C40C                          add esp, 4*3
    61                                          
    62                                          
    63                                      
    64                                          ; exit(0)
    65 00000084 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000086 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

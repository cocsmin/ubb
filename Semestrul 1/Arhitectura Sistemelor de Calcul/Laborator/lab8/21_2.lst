     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf, fread              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fread msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 33206D657265203220-         text db "3 mere 2 pere 3215g de faina", 0
    18 00000009 706572652033323135-
    18 00000012 67206465206661696E-
    18 0000001B 6100               
    19                                      lungime equ $-text-1
    20 0000001D 72657A756C7461742E-         nume db "rezultat.txt", 0
    20 00000026 74787400           
    21 0000002A 7700                        acces db "w", 0
    22 0000002C FFFFFFFF                    id dd -1
    23 00000030 00<rept>                    rezultat times lungime+1 db 0
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ;Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici, cifre si spatii. Sa se inlocuiasca toate cifrele de pe pozitii impare cu caracterul ‘X’. Sa se creeze un 
    28                                          ; ...
    29 00000000 FC                              cld
    30 00000001 BE[00000000]                    mov ESI, text
    31 00000006 BF[30000000]                    mov EDI, rezultat
    32 0000000B B91C000000                      mov ECX, lungime
    33 00000010 B700                            mov BH, 0
    34                                          repeta:
    35 00000012 AC                                  lodsb
    36 00000013 F6C701                              test BH, 1
    37 00000016 740A                                jz next
    38 00000018 3C30                                cmp AL, '0'
    39 0000001A 7206                                jb next
    40 0000001C 3C39                                cmp AL, '9'
    41 0000001E 7702                                ja next
    42 00000020 B058                                mov AL, 'X'
    43                                              
    44                                              next:
    45 00000022 AA                                  stosb
    46 00000023 80C701                              add BH, 1
    47 00000026 E2EA                            loop repeta
    48                                          
    49 00000028 B000                            mov AL, 0
    50 0000002A AA                              stosb ; ca sa pot pune in fisier
    51                                          
    52                                          
    53 0000002B 68[2A000000]                    push dword acces
    54 00000030 68[1D000000]                    push dword nume
    55 00000035 FF15[00000000]                  call [fopen]
    56 0000003B 83C408                          add ESP, 4*2
    57                                          
    58 0000003E A3[2C000000]                    mov [id], EAX
    59 00000043 83F800                          cmp EAX, 0
    60 00000046 7423                            je final
    61                                          
    62 00000048 68[30000000]                    push dword rezultat
    63 0000004D FF35[2C000000]                  push dword [id]
    64 00000053 FF15[00000000]                  call [fprintf]
    65 00000059 83C408                          add ESP, 4*2
    66                                          
    67 0000005C FF35[2C000000]                  push dword [id]
    68 00000062 FF15[00000000]                  call [fclose]
    69 00000068 83C404                          add esp, 4*1
    70                                          
    71                                          
    72                                          final:
    73                                          ; exit(0)
    74 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program

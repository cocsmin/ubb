     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 14                          a db 20
    15 00000001 0F00                        b dw 15
    16 00000003 0A000000                    e dd 10
    17 00000007 0500000000000000            x dq 5
    18                                      ; (a*a/b+b*b)/(2+b)+e-x FARA SEMN
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov AL, [a]
    24 00000005 F625[00000000]                  mul byte[a] ; AX = a*a
    25 0000000B 6689C3                          mov BX, AX ; BX = a*a
    26                                          
    27 0000000E 66A1[01000000]                  mov AX, [b] ; AX = b
    28 00000014 66F725[01000000]                mul word[b] ; DX:AX = b*b
    29                                          
    30 0000001B 6652                            push DX
    31 0000001D 6650                            push AX
    32 0000001F 58                              pop EAX ; EAX = b*b
    33                                          
    34 00000020 B900000000                      mov ECX, 0
    35 00000025 668B0D[01000000]                mov CX, [b] ; ECX = b
    36 0000002C 01C1                            add ECX, EAX
    37                                          
    38 0000002E BA00000000                      mov EDX, 0
    39 00000033 B800000000                      mov EAX, 0
    40 00000038 6689D8                          mov AX, BX ; EDX:EAX = a*a
    41 0000003B F7F1                            div ECX ; EAX = EDX:EAX / ECX ; EDX = EDX:EAX % ECX
    42                                          
    43 0000003D 668B1D[01000000]                mov BX, [b]
    44 00000044 6683C302                        add BX, 2 ; BX = b+2
    45 00000048 50                              push EAX
    46 00000049 6658                            pop AX
    47 0000004B 665A                            pop DX
    48 0000004D 66F7F3                          div BX ; AX = DX:AX / BX ; DX = DX:AX % BX
    49                                          
    50 00000050 6689C3                          mov BX, AX
    51 00000053 B800000000                      mov EAX, 0
    52 00000058 6689D8                          mov AX, BX
    53 0000005B 0305[03000000]                  add EAX, [e]
    54 00000061 BA00000000                      mov EDX, 0
    55 00000066 2B05[07000000]                  sub EAX, dword[x]
    56 0000006C 1B15[0B000000]                  sbb EDX, dword[x+4]
    57                                          
    58                                          ; exit(0)
    59 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 14                          a db 20
    15 00000001 0F00                        b dw 15
    16 00000003 0A000000                    e dd 10
    17 00000007 0500000000000000            x dq 5
    18                                     
    19                                      ; (a*a/b+b*b)/(2+b)+e-x CU SEMN
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 A0[00000000]                    mov AL, [a]
    26 00000005 F62D[00000000]                  imul byte[a] ; AX = a*a
    27 0000000B 6689C3                          mov BX, AX ; BX = a*a
    28                                          
    29 0000000E 66A1[01000000]                  mov AX, [b]
    30 00000014 66F72D[01000000]                imul word[b] ; DX:AX = b*b
    31                                          
    32 0000001B 6652                            push DX
    33 0000001D 6650                            push AX
    34 0000001F 59                              pop ECX ; ECX = b*b
    35                                          
    36 00000020 66A1[01000000]                  mov AX, [b]
    37 00000026 98                              cwde
    38 00000027 01C1                            add ECX, EAX ; ECX = b+b*b
    39                                          
    40 00000029 6689D8                          mov AX, BX
    41 0000002C 98                              cwde
    42 0000002D 99                              cdq ; EDX:EAX = a*a
    43 0000002E F7F9                            idiv ECX ; EAX = EDX:EAX / ECX ; EDX = EDX:EAX % ECX
    44                                          
    45 00000030 50                              push EAX
    46 00000031 6658                            pop AX
    47 00000033 665A                            pop DX ; DX:AX = (a*a/b+b*b)
    48 00000035 668B0D[01000000]                mov CX, [b]
    49 0000003C 6683C102                        add CX, 2
    50 00000040 66F7F9                          idiv CX ; AX = (a*a/b+b*b) / (2+b)
    51                                          
    52 00000043 98                              cwde ; EAX = (a*a/b+b*b) / (2+b)
    53 00000044 0305[03000000]                  add EAX, [e]
    54 0000004A 99                              cdq ; EDX:EAX = (a*a/b+b*b) / (2+b) + e
    55 0000004B 2B05[07000000]                  sub EAX, dword[x]
    56 00000051 1B15[0B000000]                  sbb EDX, dword[x+4]
    57                                          
    58                                          ; exit(0)
    59 00000057 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000059 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

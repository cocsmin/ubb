     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 05                          a db 5
    15 00000001 0A00                        b dw 10
    16 00000003 0F000000                    c dd 15
    17 00000007 1400000000000000            d dq 20
    18                                      ; (c-a) + (b-d) + d FARA SEMN
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A1[03000000]                    mov EAX, [c] ; EAX = c 
    24                                          
    25                                          ; convertesc a la dw
    26 00000005 BB00000000                      mov EBX, 0
    27 0000000A 8A1D[00000000]                  mov BL, [a] ; EBX = a
    28 00000010 29D8                            sub EAX, EBX ; EAX = (c-a)
    29                                          
    30                                          ; conertesc b la qw
    31 00000012 BB00000000                      mov EBX, 0
    32 00000017 B900000000                      mov ECX, 0
    33 0000001C 668B1D[01000000]                mov BX, [b]
    34                                          
    35 00000023 2B1D[07000000]                  sub EBX, dword[d] 
    36 00000029 1B0D[0B000000]                  sbb ECX, dword[d+4] ; ECX:EBX = (b-d)
    37                                          
    38                                          ; convertesc (c-a) la qw
    39 0000002F BA00000000                      mov EDX, 0 ; EDX:EAX = (c-a)
    40 00000034 01D8                            add EAX, EBX
    41 00000036 11CA                            adc EDX, ECX ; EDX:EAX = (c-a) + (b-d)
    42                                          
    43 00000038 0305[07000000]                  add EAX, dword[d]
    44 0000003E 1315[0B000000]                  adc EDX, dword[d+4] ; EDX:EAX = (c-a) + (b-d) + d
    45                                          
    46                                          
    47                                          ; exit(0)
    48 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
